import { promises as fs } from "fs";
import { getFiles } from "./common/get-files";
import { basename } from "path";
import { matchAll } from "./common/match-all";
import prettier from "prettier";

type SnippetOutput = Record<string, ISnippet>;

interface ISnippet {
  content: string;
  dependencies: string[];
}

(async () => {
  const files = await getFiles("./src/assertions");

  const output: SnippetOutput = {};

  for (const file of files) {
    const content = (await fs.readFile(file)).toString();
    const importPattern = /import { (?:.)* } from "\.\/(.+)";/g;

    const matches = matchAll(importPattern, content);
    const dependencies = new Array<string>();
    matches.forEach(match => {
      dependencies.push(match[1]);
    });

    output[basename(file).replace(".ts", "")] = {
      content: content
        .replace(importPattern, "")
        .trim()
        .replace(/export /g, ""),
      dependencies
    };
  }

  await fs.writeFile(
    "./src/render/snippets.ts",
    prettier.format(
      `
        /*
         * Autogenerated by ${basename(__filename)}
         */
        export const snippets = ${JSON.stringify(output, null, 2)};
      `,
      { parser: "typescript" }
    )
  );
})();
